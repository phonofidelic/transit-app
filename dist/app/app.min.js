angular.module("transitApp",["ngRoute","ngAnimate","ngTouch","swipe"]),angular.module("transitApp").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{templateUrl:"app/templates/planTrip.html",controller:"PlanTripController",controllerAs:"vm"}),o.html5Mode(!0)}]),angular.module("transitApp").factory("GTFSParserService",["$http",function(t){function o(){}return o.prototype.requestData=function(o){return t({method:"GET",url:o}).then(function(t){console.log("response: ",t);var o=t.data.split("\n");return cols=[],o.forEach(function(t){cols.push(t.split(","))}),cols})["catch"](function(t){console.log("transitData error: ",t)})},o.prototype.toArrays=function(t){var o=t.split("\n"),e=[];return o.forEach(function(t){e.push(t.split(","))}),e},o.prototype.toJSON=function(t){for(var o=[],e=0,n=1;n<t.length;n++){var r={};o.push(r)}var a=[],i=t.slice(1);return i.forEach(function(t){for(var o=0;o<t.length;o++)a.push(t[o])}),o.forEach(function(o){t[0].forEach(function(t){var r=t;angular.isUndefined(a[e])&&(a[n]=""),o[r]=a[e],e++})}),o},o.prototype.groupBy=function(t,o){var e={};return t.forEach(function(t){var n=JSON.stringify(o(t));e[n]=e[n]||[],e[n].push(t)}),console.log("groups: ",e),Object.keys(e).map(function(t){return e[t]})},o.prototype.readZip=function(t,o){var e=new JSZip;return JSZipUtils.getBinaryContent(t,function(t,n){if(t)throw console.log("JSZip error: "),t;e.loadAsync(n).then(function(t){return console.log("success!: ",t),e.file(o).async("string")}).then(function(t){return t})["catch"](function(t){console.error("readZip error: ",t)})})},o}]),angular.module("transitApp").factory("LocationService",["$http",function(t){function o(){}var e=new google.maps.Geocoder;return o.prototype.getCurrentPosition=function(t,o,e){return new Promise(function(t,o){navigator.geolocation.getCurrentPosition(t,o,e)})},o.prototype.getStaticPosition=function(){return t.get("assets/mockData/staticCoordsVancouver.json").then(function(t){return console.log("position##",t),t.data})},o.prototype.revGeocode=function(t){var o={};return o.lat=t.latitude,o.lng=t.longitude,new Promise(function(t,n){e.geocode({location:o},function(o,e){"OK"===e?t(o[0]):n(console.log("geocoding error: ",e))})})},o}]),angular.module("transitApp").factory("TransitLandRequestService",["$http",function(t){function o(){}return o.prototype.routesByOperator=function(o){var e={region:o},n="https://transit.land/api/v1/routes?operated_by="+e.region;return t({method:"GET",url:n,eventHandlers:{progress:function(t){console.log("progress: ",t)}}}).then(function(t){return t})["catch"](function(t){console.log("transitland error: ",t)})},o.prototype.routeByOnestopId=function(o){var e="https://transit.land/api/v1/routes?onestop_id="+o;return t({method:"GET",url:e,eventHandlers:{progress:function(t){console.log("progress: ",t)}}}).then(function(t){return t})["catch"](function(t){console.log("transitland error: ",t)})},o.prototype.routesByBbox=function(o){return new Promise(function(e){var n=o.lat+.05,r=o.lon-.05,a=o.lat-.05,i=o.lon+.05,s="https://transit.land/api/v1/routes?bbox="+r+","+n+","+i+","+a;return t.get(s).then(function(t){console.log("bbox response: ",t),e(t.data)})})},o.prototype.getStaticRoutes=function(){return t.get("assets/mockData/staticRoutesPortland.json").then(function(t){return console.log("mock routes:",t),t.data})},o.prototype.getStopInfo=function(o){var e="http://transit.land/api/v1/stops?onestop_id="+o;return t({method:"GET",url:e}).then(function(t){return console.log("getStopInfo response: ",t),t})["catch"](function(t){console.log("getStopInfo error: ",t)})},o.prototype.routeBetween=function(o,e){return t({method:"GET",url:"http://transit.land/api/v1/stops?onestop_id="+o}).then(function(t){var o={origin:t.data.stops[0]};return o}).then(function(o){return t({method:"GET",url:"http://transit.land/api/v1/stops?onestop_id="+e}).then(function(t){return o.destination=t.data.stops[0],o}).then(function(o){console.log("endpoints: ",o),console.log("endpoints.origin: ",o.origin),console.log("endpoints.destination: ",o.destination);var e={locations:[{lat:o.origin.geometry.coordinates[1],lon:o.origin.geometry.coordinates[0],type:"break"},{lat:o.destination.geometry.coordinates[1],lon:o.destination.geometry.coordinates[0],type:"break"}],costing:"multimodal"},n=(JSON.stringify(e),"https://valhalla.mapzen.com/route?json="+JSON.stringify(e)+"&api_key=valhalla-m9bds2x".replace("%22",""));console.log("mapzenUrl: ",n),t({method:"GET",url:n}).then(function(t){return console.log("routeBetween response: ",t),t})["catch"](function(t){console.log("routeBetween error: ",t)})}),o})},o.prototype.scheduleStopPairs=function(o){return t.get("http://transit.land/api/v1/schedule_stop_pairs?origin_onestop_id="+o).then(function(t){return console.log("schedule_stop_pair response: ",t),t.data.schedule_stop_pairs})["catch"](function(t){console.log("schedule_stop_pair error: ",t)})},o.prototype.routeStopPattern=function(o){return t({method:"GET",url:"http://transit.land/api/v1/route_stop_patterns?onestop_id="+o}).then(function(t){console.log("from routeStopPattern: "),console.log(t);var o=[];return t.data.route_stop_patterns[0].stop_pattern.forEach(function(t){o.push(t)}),o})["catch"](function(t){console.log("routeStopPattern error: ",t)})},o}]),angular.module("transitApp").controller("MapController",["$scope","$log","LocationService","GTFSParserService",function(t,o,e,n){var r=this,a=L.map("map",{scrollWheelZoom:!1}),i=new e,s=new n;r.stops={},r.init=function(){var t=Tangram.leafletLayer({scene:"https://raw.githubusercontent.com/tangrams/refill-style-more-labels/gh-pages/refill-style-more-labels.yaml",attribution:'<a href="https://mapzen.com/tangram" target="_blank">Tangram</a> | <a href="http://www.openstreetmap.org/about" target="_blank">&copy; OSM contributors | <a href="https://mapzen.com/" target="_blank">Mapzen</a>'});t.addTo(a),i.getCurrentPosition().then(function(t){a.setView([t.coords.latitude,t.coords.longitude],14)})["catch"](function(t){console.log("getPosition error: ",t)});var e=(L.control.geocoder("search-3LVgAzp").addTo(a),L.control.locate({position:"topleft",keepCurrentZoomLevel:!0}).addTo(a));return e.start(),o.log("init map"),a},setStopMArkers=function(){var t="http://localhost:3000/assets/transitData/stops.txt";s.requestData(t).then(function(t){console.log("GTFSParserService response: ",t);for(var o=[],e=[],n=1;n<t.length-1;n++){var r={},e=L.latLng(t[n][4],t[n][5]);r.lat=t[n][4],r.lon=t[n][5],o.push(e)}return console.log("stop coords: ",o),o}).then(function(t){t.forEach(function(t){L.marker([t.lat,t.lng]).addTo(a)});var o=L.polyline(t,{color:"red"}).addTo(a);a.fitBounds(o.getBounds())})["catch"](function(t){console.log("marker error: ",t)})},r.setRoute=function(t){i.getCurrentPosition().then(function(t){return console.log("getPosition result: ",t),t.coords}).then(function(t){return L.Routing.control({waypoints:[L.latLng(t.latitude,t.longitude),L.latLng(33.8128,-117.9259)],router:L.Routing.mapzen("valhalla-m9bds2x",{costing:"auto"}),formatter:new L.Routing.mapzenFormatter,summaryTemplate:'<div class="start">{name}</div><div class="info {costing}">{distance}, {time}</div>',routeWhileDragging:!1}).addTo(a)})["catch"](function(t){console.log("getPosition error: ",t)})}}]),angular.module("transitApp").directive("mapDirective",function(){return{templateUrl:"app/modules/map/map.html",controller:"MapController",controllerAs:"vmMap"}}),angular.module("transitApp").controller("PlanTripController",["$scope","$http","$log","$timeout","RequestService","LocationService","TransitLandRequestService","GTFSParserService",function(t,o,e,n,r,a,i,s){function c(){return navigator.serviceWorker?(console.log("initiating database"),idb.open("gtfsData",9,function(t){switch(t.oldVersion){case 0:var o=t.createObjectStore("stops",{keyPath:"stop_id"});o.createIndex("by-id","stop_id");case 1:var e=t.createObjectStore("trips",{keyPath:"trip_id"});e.createIndex("by-route-id","route_id");case 2:var n=t.createObjectStore("stop_times",{keyPath:"stop_id"});n.createIndex("by-trip-id","trip_id");case 3:var r=t.createObjectStore("routes",{keyPath:"onestop_id"});r.createIndex("by-name","route_short_name")}})):Promise.resolve()}function l(){navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(function(t){if(console.log("serviceWorker registered!"),navigator.serviceWorker.controller){if(t.waiting)return void d(t.waiting);if(t.installing)return void u(t.installing);t.addEventListener("updatefound",function(){console.log("*** updatefound ***"),u(t.installing)});var o;navigator.serviceWorker.addEventListener("controllerchange",function(){console.log("*** controllerchange ***"),o||(console.log("*** reload ***"),window.location.reload(),o=!0)})}})["catch"](function(t){console.log("serviceWorker registration error: ",t)})}function u(t){console.log("trackInstalling"),t.addEventListener("statechange",function(){"installed"==t.state&&d(t)})}function d(t){console.log("updateReady"),b.showToast=!0,b.skipWaiting=function(){t.postMessage({action:"skipWaiting"}),location.reload(),console.log("skip, ",t)}}function f(t){var o="assets/transitData/google_transit.zip",t=t;return new Promise(function(e){JSZipUtils.getBinaryContent(o,function(o,n){if(o)throw console.log("JSZip error: "),o;E.loadAsync(n).then(function(o){return E.file(t).async("string")}).then(function(t){return T.toArrays(t)}).then(function(t){return T.toJSON(t)}).then(function(t){e(t)})["catch"](function(t){console.log("readZip error: ",t)})})})}function g(t){f("trips.txt").then(function(o){C.then(function(e){if(e){var n=[],r=e.transaction("trips","readwrite"),a=r.objectStore("trips");return o.forEach(function(o){t.route_id===o.route_id&&(a.put(o),n.push(o))}),console.log("selectedTrips:",n),h(n,t),n}}).then(function(o){m(o,t)})["catch"](function(t){console.error("Could not store trips for selected route:",t)})})["catch"](function(t){console.error("Error reading trips.txt:",t)})}function h(t,o){o.trips=[],C.then(function(t){if(t){var o=t.transaction("trips"),e=o.objectStore("trips"),n=e.index("by-route-id");return n.openCursor()}}).then(function(t){if(t)return t.advance(1)}).then(function e(t){if(t)return o.route_id===t.value.route_id&&o.trips.push(t.value),t["continue"]().then(e)}).then(function(){console.log("done cusoring:"),console.log(o)})["catch"](function(t){console.error("IDB cursor error:",t)})}function m(t,o){f("stop_times.txt").then(function(e){C.then(function(n){if(n){var r=n.transaction("stop_times","readwrite"),a=r.objectStore("stop_times");console.log("selectedRoute.route_id:",o.route_id),e.forEach(function(o){o.trip_id===t[0].trip_id&&a.put(o)}),console.log("stop_times done")}})["catch"](function(t){console.log("Could not collect stop_times:",t)})})["catch"](function(t){console.error("Could not read stop_times.txt:",t)})}function v(o){f("routes.txt").then(function(e){C.then(function(n){function r(){for(var t={},o=arguments.length,e=0;e<o;e++)for(p in arguments[e])arguments[e].hasOwnProperty(p)&&(t[p]=arguments[e][p]);return t}if(n){var a=[];o.forEach(function(t){e.forEach(function(o){if(t.name===o.route_short_name){o.onestop_id=t.onestop_id;var e=r(o,t);a.push(e)}})}),b.routes=a,t.$apply(),console.log("*** vm.routes2: ",b.routes);var i=n.transaction("routes","readwrite"),s=i.objectStore("routes");return a.forEach(function(t){s.put(t)}),a}})})["catch"](function(t){console.error("Could not read gtfs data from routes.txt:",t)})}function _(o){var e={lat:o.coords.latitude,lon:o.coords.longitude};k.routesByBbox(e).then(function(o){var e=o.routes.filter(function(t){var o=["o-c20-trimet","o-dhw-browardcountytransit"];if(t.operated_by_onestop_id===o[1])return t});return b.currentPosition.countyString=e[0].operated_by_onestop_id,t.$apply(),console.log("*** routes: ",e),e.forEach(function(t){if(null===t.color||void 0===t.color){var o=randomColor({luminosity:"bright"});o=o.replace("#",""),t.color=o}var e=t.geometry.coordinates;e.forEach(function(o){var e=[];o.forEach(function(t){e.push(L.latLng(t[1],t[0]))});L.polyline(e,{color:"#"+t.color}).addTo(D)})}),b.routes=e,t.$apply(),b.routes}).then(function(t){S(),v(t)})["catch"](function(t){console.error("transitService.routesByBbox request error: ",t)})}function y(o,e){B&&D.removeLayer(A),A=new L.FeatureGroup;var n=[],r=L.VectorMarkers.icon({icon:"bus",markerColor:"#"+e,prefix:"fa"});o.forEach(function(t){var o=L.latLng(t.stop_lat,t.stop_lon);n.push(o)}),n.forEach(function(t){A.addLayer(L.marker(t,{icon:r}))}),console.log("### add marker ###",B),B=!0,D.addLayer(A),t.$apply()}function S(){var t=$(".routeButtonSecond"),o=$(".routeButtonFirst");window.onscroll=function(){o.offset().top>=t.offset().top&&o.removeClass("stuck"),$(document).scrollTop()+window.innerHeight<o.offset().top+50&&o.addClass("stuck")}}function P(){for(var t={},o=arguments.length,e=0;e<o;e++)for(p in arguments[e])arguments[e].hasOwnProperty(p)&&(t[p]=arguments[e][p]);return t}var b=this,w=(new r,new a),k=new i,T=new s,E=new JSZip,D=L.map("map",{scrollWheelZoom:!1});b.gtfsParserService=new s,b.inputData={},b.inputData.departure={},b.inputData.departure.coords={},b.inputData.arrival={},b.inputData.arrival.coords={},b.currentPosition={};var A,C=c(),B=!1;b.transitRequest=function(t){k.routesByOperator(t).then(function(t){b.routeData=t.data.routes,console.log("transitRequest response: ",t)})},b.getStopInifo=function(){console.log("getStopInifo: "),b.routeData[0].stops_served_by_route.forEach(function(){k.getStopInfo(this.onestop_id)})},b.routeBetween=function(t){var o=t.stops_served_by_route.length;console.log("arrLength: ",o);var e=t.stops_served_by_route[0].stop_onestop_id,n=t.stops_served_by_route[o-1].stop_onestop_id;console.log("arr_onestop_id: ",n),k.routeBetween(e,n).then(function(t){console.log("controller routeBetween response: ",t)})},b.routeRequest=function(t){k.routeByOnestopId(t).then(function(t){b.routeData=t.data.routes,console.log("routeRequest response: ",t)})},b.scheduleStopPairs=function(t){b.scheduleStopPairs&&(b.scheduleStopPairs=[]),k.scheduleStopPairs(t).then(function(t){console.log("scheduleStopPairs: ",t),b.scheduleStopPairs=t})},b.routeStopPattern=function(t){k.routeStopPattern(t).then(function(t){var e="";t.forEach(function(t){e+=t+","}),e=e.slice(0,-1),o.get("http://transit.land/api/v1/stops?onestop_id="+e+"&per_page=100").then(function(t){console.log("stops from routeStopPattern: ",t),console.log("stop names: "),t.data.stops.forEach(function(t){console.log(t.name)})})})},b.getCurrentPosition=function(){w.getCurrentPosition().then(function(t){return console.log("getPosition result: ",t.coords),b.currentPosition.lat=t.coords.latitude,b.currentPosition.lon=t.coords.longitude,t.coords}).then(function(t){w.revGeocode(t).then(function(t){console.log("region: ",t.address_components[3].short_name),b.currentPosition.addressString=t.formatted_address,b.currentPosition.countyString="o-dhw-browardcountytransit"})})},b.getAddress=function(o){"departure-inp"===o?n(function(){console.log("*** getAddress ***"),console.log("locationData: ",t.departureAutocomplete.getPlace()),t.departureAutocomplete.getPlace()&&(b.inputData.departure.name=t.departureAutocomplete.getPlace().formatted_address,b.inputData.departure.coords.lat=t.departureAutocomplete.getPlace().geometry.location.lat(),b.inputData.departure.coords.lon=t.departureAutocomplete.getPlace().geometry.location.lng())},500):n(function(){console.log("*** getAddress ***"),console.log("locationData: ",t.arrivalAutocomplete.getPlace()),t.arrivalAutocomplete.getPlace()&&(b.inputData.arrival.name=t.arrivalAutocomplete.getPlace().formatted_address,b.inputData.arrival.coords.lat=t.arrivalAutocomplete.getPlace().geometry.location.lat(),b.inputData.arrival.coords.lon=t.arrivalAutocomplete.getPlace().geometry.location.lng())},500)},b.sendRequest=function(t){var e={locations:[{lat:b.inputData.departure.coords.lat||b.currentPosition.lat,lon:b.inputData.departure.coords.lon||b.currentPosition.lon},{lat:b.inputData.arrival.coords.lat,lon:b.inputData.arrival.coords.lon}],costing:"multimodal",costing_options:{transit:{use_bus:.1,use_rail:1}},directions_options:{units:"miles"}},n="https://valhalla.mapzen.com/route?json="+JSON.stringify(e)+"&api_key=valhalla-m9bds2x".replace("%22","");o({method:"GET",url:n}).then(function(t){console.log("sendRequest response: ",t),b.tripData=t.data.trip})["catch"](function(t){console.log("RequestService.send error: ",t)})},b.init=function(){},b.initMap=function(){l();var t=Tangram.leafletLayer({scene:"https://raw.githubusercontent.com/tangrams/refill-style-more-labels/gh-pages/refill-style-more-labels.yaml",attribution:'<a href="https://mapzen.com/tangram" target="_blank">Tangram</a> | <a href="http://www.openstreetmap.org/about" target="_blank">&copy; OSM contributors | <a href="https://mapzen.com/" target="_blank">Mapzen</a>'});t.addTo(D),w.getCurrentPosition().then(function(t){return console.log("position:",t),D.setView([t.coords.latitude,t.coords.longitude],14),t}).then(function(t){console.log("*** position: ",t),_(t)})["catch"](function(t){console.log("getPosition error: ",t)});var o=L.control.locate({position:"topleft",keepCurrentZoomLevel:!0}).addTo(D);return o.start(),e.log("init map"),D},b.setColor=function(t){return{background:"#"+t.color}},b.selectRoute=function(t){f("stops.txt").then(function(o){function e(t,o){return t.find(function(t){if(t.stop_name===o.stop_name)return t})}return t.collectedStops=[],C.then(function(n){var r=n.transaction("stops","readwrite"),a=r.objectStore("stops");o.forEach(function(o){e(t.stops_served_by_route,o)&&(a.put(o),t.stops_served_by_route.forEach(function(e){o.stop_name===e.stop_name&&(collectedStop=P(o,e),t.collectedStops.push(collectedStop))}))})}),b.selectedRoute=t,t}).then(function(t){y(t.collectedStops,t.color),g(t)})["catch"](function(t){console.error("Could not collect stops data: ",t)}),console.log("selectedRoute: ",t)},b.transitionToMap=function(){$("body").scrollTop(0),console.log("scroll top")},b.testFunction=function(){console.log("hello world!")}}]),angular.module("transitApp").factory("RequestService",["$http",function(t){function o(){}return o.prototype.send=function(o){t({method:"GET",url:o}).then(function(t){return t})["catch"](function(t){console.log("RequestService.send error: ",t)})},o}]);