"use-strict";angular.module("transitApp").controller("PlanTripController",["$scope","$http","$log","$timeout","RequestService","LocationService","TransitLandRequestService","GTFSParserService",function(t,o,e,n,r,i,a,c){function s(){return navigator.serviceWorker?(console.log("initiating database"),idb.open("gtfsData",9,function(t){switch(t.oldVersion){case 0:var o=t.createObjectStore("stops",{keyPath:"stop_id"});o.createIndex("by-id","stop_id");case 1:var e=t.createObjectStore("trips",{keyPath:"trip_id"});e.createIndex("by-route-id","route_id");case 2:var n=t.createObjectStore("stop_times",{keyPath:"stop_id"});n.createIndex("by-trip-id","trip_id"),n.createIndex("by-stop-id","stop_id");case 3:var r=t.createObjectStore("routes",{keyPath:"onestop_id"});r.createIndex("by-name","route_short_name")}})):Promise.resolve()}function u(){navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(function(t){if(console.log("serviceWorker registered!"),navigator.serviceWorker.controller){if(t.waiting)return void d(t.waiting);if(t.installing)return void l(t.installing);t.addEventListener("updatefound",function(){console.log("*** updatefound ***"),l(t.installing)});var o;navigator.serviceWorker.addEventListener("controllerchange",function(){console.log("*** controllerchange ***"),o||(console.log("*** reload ***"),window.location.reload(),o=!0)})}})["catch"](function(t){console.log("serviceWorker registration error: ",t)})}function l(t){console.log("trackInstalling"),t.addEventListener("statechange",function(){"installed"==t.state&&d(t)})}function d(t){console.log("updateReady"),k.showToast=!0,k.skipWaiting=function(){t.postMessage({action:"skipWaiting"}),location.reload(),console.log("skip, ",t)}}function f(t){var o="assets/transitData/gtfsVancouver.zip",t=t;return new Promise(function(e){JSZipUtils.getBinaryContent(o,function(o,n){if(o)throw console.log("JSZip error: "),o;E.loadAsync(n).then(function(o){return E.file(t).async("string")}).then(function(t){return D.toArrays(t)}).then(function(t){return D.toJSON(t)}).then(function(t){e(t)})["catch"](function(t){console.log("readZip error: ",t)})})})}function g(t){f("trips.txt").then(function(o){j.then(function(e){if(e){var n=[],r=e.transaction("trips","readwrite"),i=r.objectStore("trips");return o.forEach(function(o){t.route_id===o.route_id&&(i.put(o),n.push(o))}),console.log("selectedTrips:",n),h(n,t),n}}).then(function(o){m(o,t)})["catch"](function(t){console.error("Could not store trips for selected route:",t)})})["catch"](function(t){console.error("Error reading trips.txt:",t)})}function h(o,e){e.trips=[],j.then(function(o){if(o){var e=o.transaction("trips"),n=e.objectStore("trips"),r=n.index("by-route-id");return t.$apply(),r.openCursor()}}).then(function(t){if(t)return t.advance(1)}).then(function n(t){if(t)return e.route_id===t.value.route_id&&e.trips.push(t.value),t["continue"]().then(n)}).then(function(){console.log("done cusoring:"),k.tripsLoading=!1,t.$apply(),console.log(e)})["catch"](function(t){console.error("IDB cursor error:",t)})}function m(t,o){f("stop_times.txt").then(function(e){j.then(function(n){if(n){var r=n.transaction("stop_times","readwrite"),i=r.objectStore("stop_times");console.log("selectedRoute.route_id:",o.route_id),e.forEach(function(o){o.trip_id===t[0].trip_id&&i.put(o)}),console.log("stop_times done")}})["catch"](function(t){console.log("Could not collect stop_times:",t)})})["catch"](function(t){console.error("Could not read stop_times.txt:",t)})}function v(o){f("routes.txt").then(function(e){j.then(function(n){if(n){var r=[];o.forEach(function(t){e.forEach(function(o){if(t.name===o.route_short_name){o.onestop_id=t.onestop_id;var e=w(o,t);r.push(e)}})}),k.routes=r,t.$apply(),console.log("*** vm.routes: ",k.routes);var i=n.transaction("routes","readwrite"),a=i.objectStore("routes");return r.forEach(function(t){a.put(t)}),r}})})["catch"](function(t){console.error("Could not read gtfs data from routes.txt:",t)})}function _(o){var e={lat:o.coords.latitude,lon:o.coords.longitude};C.routesByBbox(e).then(function(o){function e(t,o){return t=Math.ceil(t),o=Math.floor(o),Math.floor(Math.random()*(o-t))+t}var n=o.routes;return k.currentPosition.countyString=n[0].operated_by_onestop_id,t.$apply(),n.forEach(function(t){if(null===t.color||void 0===t.color){var o=e(0,T.length),n=T[o];T.splice(o,1),console.log("color",o,n),angular.isUndefined(n)&&(n=randomColor({luminosity:"bright"}),n=n.replace("#",""),console.log("randomcolor",n)),t.color=n}var r=t.geometry.coordinates;S=L.layerGroup(),r.forEach(function(o){var e=[];o.forEach(function(t){e.push(L.latLng(t[1],t[0]))}),S.addLayer(L.polyline(e,{color:"#"+t.color}))}),x.addLayer(S),t.active=!1}),k.routes=n,t.$apply(),k.routes}).then(function(t){b(),v(t)})["catch"](function(t){console.error("transitService.routesByBbox request error: ",t)})}function y(o,e){R&&x.removeLayer(B),B=new L.FeatureGroup;var n=[],r=L.VectorMarkers.icon({icon:"bus",markerColor:"#"+e,prefix:"fa"});o.forEach(function(t){var o=L.latLng(t.stop_lat,t.stop_lon);n.push(o)}),n.forEach(function(t){B.addLayer(L.marker(t,{icon:r}))}),console.log("### add marker ###",R),R=!0,x.addLayer(B),t.$apply()}function b(){window.onscroll=function(){$(".routeButtonFirst").offset().top>=$(".routeButtonSecond").offset().top&&$(".routeButtonFirst").removeClass("stuck"),$(document).scrollTop()+window.innerHeight<$(".routeButtonFirst").offset().top+50&&$(".routeButtonFirst").addClass("stuck")}}function w(){for(var t={},o=arguments.length,e=0;e<o;e++)for(p in arguments[e])arguments[e].hasOwnProperty(p)&&(t[p]=arguments[e][p]);return t}var S,k=this,P=(new r,new i),C=new a,D=new c,E=new JSZip,x=L.map("map",{scrollWheelZoom:!1}),T=["00985f","4e5357","6e3217","cf8e00","ff6319","006a84","01af40","0038a5","c60c31","c60c31","01a1df","996533","6bbf43","a8a9ad","808183","fccc0a"];k.gtfsParserService=new c,k.inputData={},k.inputData.departure={},k.inputData.arrival={},k.currentPosition={},k.currentTime=moment().format("hh:mm:ss"),console.log("current time:",k.currentTime);var B,j=s(),R=!1;k.getCurrentPosition=function(){P.getCurrentPosition().then(function(t){return console.log("getPosition result: ",t.coords),k.currentPosition.lat=t.coords.latitude,k.currentPosition.lon=t.coords.longitude,t.coords}).then(function(t){k.inputData.departure.coords=t,P.revGeocode(t).then(function(t){console.log("region: ",t.address_components[3].short_name),k.currentPosition.addressString=t.formatted_address,k.inputData.departure.addressString=k.currentPosition.addressString})})},k.autoAddress=function(){var t=document.getElementById("departure-input"),o=document.getElementById("arrival-input"),e={types:["address"]};k.inputData.departure.autocomplete=new google.maps.places.Autocomplete(t,e),k.inputData.arrival.autocomplete=new google.maps.places.Autocomplete(o,e)},k.getAddress=function(){k.inputData.arrival.addressString=k.inputData.arrival.autocomplete.getPlace()},k.getCoordsFromAddress=function(t){P.geocode(t).then(function(t){console.log("getCoordsFromAddress response",t),k.inputData.arrival.coords=t.data.results[0].geometry.location,console.log("vm.inputData.arrival.coords",k.inputData.arrival.coords)})},k.sendRequest=function(){var t={locations:[{lat:k.inputData.departure.coords.latitude||k.currentPosition.lat,lon:k.inputData.departure.coords.longitude||k.currentPosition.lon},{lat:k.inputData.arrival.coords.lat,lon:k.inputData.arrival.coords.lng}],costing:"multimodal",costing_options:{transit:{use_bus:.1,use_rail:1}},directions_options:{units:"miles"}},n="https://valhalla.mapzen.com/route?json="+JSON.stringify(t)+"&api_key=valhalla-m9bds2x".replace("%22","");o({method:"GET",url:n}).then(function(t){console.log("sendRequest response: ",t),k.tripData=t.data.trip})["catch"](function(t){e.error("RequestService.send error: ",t)})},k.extractTransitRoute=function(t){S.clearLayers(),P.decodePolyline(t).then(function(t){var o=[];t.forEach(function(t){o.push(L.latLng(t[0],t[1]))});var e=L.polyline(o,{color:"red"}).addTo(x);console.log("routeLineLayer",S),x.fitBounds(e.getBounds())})},k.init=function(){P.getCurrentPosition().then(function(t){_(t)})},k.initMap=function(){u();var t=Tangram.leafletLayer({scene:"https://raw.githubusercontent.com/tangrams/refill-style-more-labels/gh-pages/refill-style-more-labels.yaml",attribution:'<a href="https://mapzen.com/tangram" target="_blank">Tangram</a> | <a href="http://www.openstreetmap.org/about" target="_blank">&copy; OSM contributors | <a href="https://mapzen.com/" target="_blank">Mapzen</a>'});t.addTo(x),P.getCurrentPosition().then(function(t){console.log("position:",t),x.setView([t.coords.latitude,t.coords.longitude],14)})["catch"](function(t){console.log("getPosition error: ",t)});var o=L.control.locate({position:"topleft",keepCurrentZoomLevel:!0}).addTo(x);return o.start(),e.log("init map"),x},k.setColor=function(t){return{background:"#"+t.color}},k.selectRoute=function(t){k.selectedRoute=t,f("stops.txt").then(function(o){function e(t,o){return t.find(function(t){if(t.stop_name===o.stop_name)return t})}return t.collectedStops=[],j.then(function(n){if(n){var r=n.transaction("stops","readwrite"),i=r.objectStore("stops");o.forEach(function(o){e(t.stops_served_by_route,o)&&t.stops_served_by_route.forEach(function(e){if(o.stop_name===e.stop_name){var n=w(o,e);t.collectedStops.push(n),i.put(n)}})})}}),t}).then(function(t){return y(t.collectedStops,t.color),g(t),t})["catch"](function(t){console.error("Could not collect stops data: ",t)}),console.log("selectedRoute: ",t)},k.transitionToMap=function(){$("body").scrollTop(0),console.log("scroll top")},k.testFunction=function(){console.log("hello world!")}}]);